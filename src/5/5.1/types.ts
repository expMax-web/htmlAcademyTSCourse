// Нам важно, чтобы названия критичности сообщения имели
// определённый порядок.
// Массив имеет натуральный порядок, этим мы и воспользуемся.
export const severityOrder = ["info", "warning", "error"] as const;

// TypeScript позволяет нам извлечь из константного массива
// типы элементов в объединение — назовём этот тип.
// Можете убедиться, что эта строка эквивалентна
// type Severity = "info" | "warning" | "error".
export type Severity = (typeof severityOrder)[number];

// В TypeScript (по наследству от JavaScript) всё ещё есть
// трудности по обработке календарных данных.
// Добавим гибкости.
export type DateTime = string & { "iso formatted date": void };

// Запись в журнале будет иметь
// вот такую структуру.
export interface LogRecord {
  id: number; // Уникальный идентификатор — identity — создаёт база данных.
  date: DateTime; // Дата регистрации события — инициализирует «центральный сервер».
  severity: Severity; // Критичность сообщения поможет администратору при анализе логов.
  category: string; // Категория поможет сгруппировать сообщения по месту их возникновения.
  message: string; // Текст сообщения поможет разработчику в поиске дефектов.
}

// Позаботимся о разработчиках — функции — методы,
// обозначенные в файле main.ts, будут иметь такую сигнатуру.
interface LogMessage {
  (message: string): void;
}

// А вот и сами методы.
// Воспользуемся объединением специализированных
// строковых литералов в массиве наших констант.
export type Logger = {
  [K in Severity]: LogMessage;
};
